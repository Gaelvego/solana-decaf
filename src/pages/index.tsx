import { type NextPage } from "next";
import Head from "next/head";
import { Toaster } from "react-hot-toast";

const Home: NextPage = () => {
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>Hello world</div>

      <Toaster position="bottom-right" reverseOrder={false} />
      <Wallet>
        <SendSOLToRandomAddress />
      </Wallet>

      <button
        onClick={() => void signOut({ onSuccess: () => router.reload() })}
      >
        Cerrar sesion
      </button>
    </>
  );
};

import { WalletNotConnectedError } from "@solana/wallet-adapter-base";
import { useConnection, useWallet } from "@solana/wallet-adapter-react";
import { Keypair, SystemProgram, Transaction } from "@solana/web3.js";
import React, { type FC, useCallback } from "react";
import { Wallet } from "~/components/wallet/Wallet";
import { withRedirects } from "~/server/api/firebase/withRedirects";
import { signOut } from "~/utils/firebase/auth";
import { useRouter } from "next/router";

export const SendSOLToRandomAddress: FC = () => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const lamports = await connection.getMinimumBalanceForRentExemption(0);

    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: Keypair.generate().publicKey,
        lamports,
      })
    );

    const {
      context: { slot: minContextSlot },
      value: { blockhash, lastValidBlockHeight },
    } = await connection.getLatestBlockhashAndContext();

    const signature = await sendTransaction(transaction, connection, {
      minContextSlot,
    });

    await connection.confirmTransaction({
      blockhash,
      lastValidBlockHeight,
      signature,
    });
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={() => void onClick()} disabled={!publicKey}>
      Send SOL to a random address!
    </button>
  );
};

export const getServerSideProps = withRedirects({
  onAuthFailure: () => ({ destination: "/login", permanent: false }),
});

export default Home;
